/* automatically generated by rust-bindgen 0.66.1 */

pub const MAINBUF_SIZE: u32 = 1940;
pub const MAX_NGRAN: u32 = 2;
pub const MAX_NCHAN: u32 = 2;
pub const MAX_NSAMP: u32 = 576;
pub const MAX_SCFBD: u32 = 4;
pub const NGRANS_MPEG1: u32 = 2;
pub const NGRANS_MPEG2: u32 = 1;
pub const SYNCWORDH: u32 = 255;
pub const SYNCWORDL: u32 = 224;
pub const MPEGVersion_MPEG1: MPEGVersion = 0;
pub const MPEGVersion_MPEG2: MPEGVersion = 1;
pub const MPEGVersion_MPEG25: MPEGVersion = 2;
pub type MPEGVersion = core::ffi::c_uint;
pub type HMP3Decoder = *mut core::ffi::c_void;
pub const ERR_MP3_NONE: _bindgen_ty_1 = 0;
pub const ERR_MP3_INDATA_UNDERFLOW: _bindgen_ty_1 = -1;
pub const ERR_MP3_MAINDATA_UNDERFLOW: _bindgen_ty_1 = -2;
pub const ERR_MP3_FREE_BITRATE_SYNC: _bindgen_ty_1 = -3;
pub const ERR_MP3_OUT_OF_MEMORY: _bindgen_ty_1 = -4;
pub const ERR_MP3_NULL_POINTER: _bindgen_ty_1 = -5;
pub const ERR_MP3_INVALID_FRAMEHEADER: _bindgen_ty_1 = -6;
pub const ERR_MP3_INVALID_SIDEINFO: _bindgen_ty_1 = -7;
pub const ERR_MP3_INVALID_SCALEFACT: _bindgen_ty_1 = -8;
pub const ERR_MP3_INVALID_HUFFCODES: _bindgen_ty_1 = -9;
pub const ERR_MP3_INVALID_DEQUANTIZE: _bindgen_ty_1 = -10;
pub const ERR_MP3_INVALID_IMDCT: _bindgen_ty_1 = -11;
pub const ERR_MP3_INVALID_SUBBAND: _bindgen_ty_1 = -12;
pub const ERR_MP3_UNSUPPORTED: _bindgen_ty_1 = -13;
pub const ERR_UNKNOWN: _bindgen_ty_1 = -9999;
pub type _bindgen_ty_1 = core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MP3FrameInfo {
    pub bitrate: core::ffi::c_int,
    pub nChans: core::ffi::c_int,
    pub samprate: core::ffi::c_int,
    pub bitsPerSample: core::ffi::c_int,
    pub outputSamps: core::ffi::c_int,
    pub layer: core::ffi::c_int,
    pub version: core::ffi::c_int,
    pub size: core::ffi::c_int,
}
#[test]
fn bindgen_test_layout__MP3FrameInfo() {
    const UNINIT: ::core::mem::MaybeUninit<_MP3FrameInfo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_MP3FrameInfo>(),
        32usize,
        concat!("Size of: ", stringify!(_MP3FrameInfo))
    );
    assert_eq!(
        ::core::mem::align_of::<_MP3FrameInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(_MP3FrameInfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bitrate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3FrameInfo),
            "::",
            stringify!(bitrate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nChans) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3FrameInfo),
            "::",
            stringify!(nChans)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).samprate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3FrameInfo),
            "::",
            stringify!(samprate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bitsPerSample) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3FrameInfo),
            "::",
            stringify!(bitsPerSample)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).outputSamps) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3FrameInfo),
            "::",
            stringify!(outputSamps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).layer) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3FrameInfo),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3FrameInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3FrameInfo),
            "::",
            stringify!(size)
        )
    );
}
pub type MP3FrameInfo = _MP3FrameInfo;
extern "C" {
    pub fn MP3InitDecoder() -> HMP3Decoder;
}
extern "C" {
    pub fn MP3FreeDecoder(hMP3Decoder: HMP3Decoder);
}
extern "C" {
    pub fn MP3Decode(
        hMP3Decoder: HMP3Decoder,
        inbuf: *mut *const core::ffi::c_uchar,
        bytesLeft: *mut core::ffi::c_int,
        outbuf: *mut core::ffi::c_short,
        useSize: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn MP3GetLastFrameInfo(hMP3Decoder: HMP3Decoder, mp3FrameInfo: *mut MP3FrameInfo);
}
extern "C" {
    pub fn MP3GetNextFrameInfo(
        hMP3Decoder: HMP3Decoder,
        mp3FrameInfo: *mut MP3FrameInfo,
        buf: *const core::ffi::c_uchar,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn MP3FindSyncWord(
        buf: *const core::ffi::c_uchar,
        nBytes: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MP3DecInfo {
    pub FrameHeaderPS: *mut core::ffi::c_void,
    pub SideInfoPS: *mut core::ffi::c_void,
    pub ScaleFactorInfoPS: *mut core::ffi::c_void,
    pub HuffmanInfoPS: *mut core::ffi::c_void,
    pub DequantInfoPS: *mut core::ffi::c_void,
    pub IMDCTInfoPS: *mut core::ffi::c_void,
    pub SubbandInfoPS: *mut core::ffi::c_void,
    pub mainBuf: [core::ffi::c_uchar; 1940usize],
    pub freeBitrateFlag: core::ffi::c_int,
    pub freeBitrateSlots: core::ffi::c_int,
    pub bitrate: core::ffi::c_int,
    pub nChans: core::ffi::c_int,
    pub samprate: core::ffi::c_int,
    pub nGrans: core::ffi::c_int,
    pub nGranSamps: core::ffi::c_int,
    pub nSlots: core::ffi::c_int,
    pub layer: core::ffi::c_int,
    pub version: MPEGVersion,
    pub size: core::ffi::c_int,
    pub mainDataBegin: core::ffi::c_int,
    pub mainDataBytes: core::ffi::c_int,
    pub part23Length: [[core::ffi::c_int; 2usize]; 2usize],
}
#[test]
fn bindgen_test_layout__MP3DecInfo() {
    const UNINIT: ::core::mem::MaybeUninit<_MP3DecInfo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_MP3DecInfo>(),
        2064usize,
        concat!("Size of: ", stringify!(_MP3DecInfo))
    );
    assert_eq!(
        ::core::mem::align_of::<_MP3DecInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_MP3DecInfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FrameHeaderPS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(FrameHeaderPS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SideInfoPS) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(SideInfoPS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ScaleFactorInfoPS) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(ScaleFactorInfoPS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HuffmanInfoPS) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(HuffmanInfoPS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DequantInfoPS) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(DequantInfoPS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMDCTInfoPS) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(IMDCTInfoPS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SubbandInfoPS) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(SubbandInfoPS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mainBuf) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(mainBuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeBitrateFlag) as usize - ptr as usize },
        1996usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(freeBitrateFlag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeBitrateSlots) as usize - ptr as usize },
        2000usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(freeBitrateSlots)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bitrate) as usize - ptr as usize },
        2004usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(bitrate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nChans) as usize - ptr as usize },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(nChans)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).samprate) as usize - ptr as usize },
        2012usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(samprate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nGrans) as usize - ptr as usize },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(nGrans)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nGranSamps) as usize - ptr as usize },
        2020usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(nGranSamps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nSlots) as usize - ptr as usize },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(nSlots)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).layer) as usize - ptr as usize },
        2028usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(layer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        2036usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mainDataBegin) as usize - ptr as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(mainDataBegin)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mainDataBytes) as usize - ptr as usize },
        2044usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(mainDataBytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).part23Length) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(_MP3DecInfo),
            "::",
            stringify!(part23Length)
        )
    );
}
pub type MP3DecInfo = _MP3DecInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SFBandTable {
    pub l: [core::ffi::c_short; 23usize],
    pub s: [core::ffi::c_short; 14usize],
}
#[test]
fn bindgen_test_layout__SFBandTable() {
    const UNINIT: ::core::mem::MaybeUninit<_SFBandTable> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_SFBandTable>(),
        74usize,
        concat!("Size of: ", stringify!(_SFBandTable))
    );
    assert_eq!(
        ::core::mem::align_of::<_SFBandTable>(),
        2usize,
        concat!("Alignment of ", stringify!(_SFBandTable))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFBandTable),
            "::",
            stringify!(l)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFBandTable),
            "::",
            stringify!(s)
        )
    );
}
pub type SFBandTable = _SFBandTable;
extern "C" {
    pub fn xmp3_AllocateBuffers() -> *mut MP3DecInfo;
}
extern "C" {
    pub fn xmp3_FreeBuffers(mp3DecInfo: *mut MP3DecInfo);
}
extern "C" {
    pub fn xmp3_CheckPadBit(mp3DecInfo: *mut MP3DecInfo) -> core::ffi::c_int;
}
extern "C" {
    pub fn xmp3_UnpackFrameHeader(
        mp3DecInfo: *mut MP3DecInfo,
        buf: *const core::ffi::c_uchar,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn xmp3_UnpackSideInfo(
        mp3DecInfo: *mut MP3DecInfo,
        buf: *const core::ffi::c_uchar,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn xmp3_DecodeHuffman(
        mp3DecInfo: *mut MP3DecInfo,
        buf: *const core::ffi::c_uchar,
        bitOffset: *mut core::ffi::c_int,
        huffBlockBits: core::ffi::c_int,
        gr: core::ffi::c_int,
        ch: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn xmp3_Dequantize(mp3DecInfo: *mut MP3DecInfo, gr: core::ffi::c_int) -> core::ffi::c_int;
}
extern "C" {
    pub fn xmp3_IMDCT(
        mp3DecInfo: *mut MP3DecInfo,
        gr: core::ffi::c_int,
        ch: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn xmp3_UnpackScaleFactors(
        mp3DecInfo: *mut MP3DecInfo,
        buf: *const core::ffi::c_uchar,
        bitOffset: *mut core::ffi::c_int,
        bitsAvail: core::ffi::c_int,
        gr: core::ffi::c_int,
        ch: core::ffi::c_int,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn xmp3_Subband(
        mp3DecInfo: *mut MP3DecInfo,
        pcmBuf: *mut core::ffi::c_short,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub static mut xmp3_samplerateTab: [[core::ffi::c_int; 3usize]; 3usize];
}
extern "C" {
    pub static mut xmp3_bitrateTab: [[[core::ffi::c_short; 15usize]; 3usize]; 3usize];
}
extern "C" {
    pub static mut xmp3_samplesPerFrameTab: [[core::ffi::c_short; 3usize]; 3usize];
}
extern "C" {
    pub static xmp3_bitsPerSlotTab: [core::ffi::c_short; 3usize];
}
extern "C" {
    pub static mut xmp3_sideBytesTab: [[core::ffi::c_short; 2usize]; 3usize];
}
extern "C" {
    pub static mut xmp3_slotTab: [[[core::ffi::c_short; 15usize]; 3usize]; 3usize];
}
extern "C" {
    pub static mut xmp3_sfBandTable: [[SFBandTable; 3usize]; 3usize];
}
